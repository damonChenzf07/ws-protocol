cmake_minimum_required(VERSION 3.15)
project(FoxgloveWebSocketExamples CXX)

set(CMAKE_CXX_STANDARD 14)
add_definitions (-DASIO_STANDALONE)
add_definitions (-D_WEBSOCKETPP_CPP14_STL_)
find_package(Protobuf 3 REQUIRED)
#find_package(foxglove-websocket REQUIRED)

FILE(GLOB all_protos "proto/foxglove/*.proto")

FOREACH(f ${all_protos})
    file(RELATIVE_PATH f ${CMAKE_CURRENT_SOURCE_DIR}/proto ${f})
    STRING(REGEX REPLACE "\\.proto$" "" f ${f})
    LIST(APPEND proto_sources "autogenerated/${f}.pb.h")
    LIST(APPEND proto_sources "autogenerated/${f}.pb.cc")
ENDFOREACH(f)

add_custom_command(
    OUTPUT ${proto_sources}
    COMMAND ${CMAKE_COMMAND} -E make_directory autogenerated
    COMMAND ${Protobuf_PROTOC_EXECUTABLE} --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/proto --cpp_out=autogenerated ${all_protos}
)

list(APPEND pub_includes "${FOXGLOVE_WEBSOCKET_PATH}/include")
add_executable(example_server src/example_server.cpp ${proto_sources})
target_include_directories(example_server PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/autogenerated)
target_include_directories(example_server PUBLIC pub_includes)
target_link_directories(example_server PUBLIC ${FOXGLOVE_WEBSOCKET_PATH}/lib)
target_link_directories(example_server PUBLIC ${FOXGLOVE_WEBSOCKET_PATH}/lib64)
#target_link_libraries(example_server foxglove-websocket::foxglove-websocket protobuf::libprotobuf)
target_link_libraries(example_server protobuf::libprotobuf -lfoxglove_websocket -lz -lssl -lcrypto)
